# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Service Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.4
# Namespace: com.sun.star.text
from __future__ import annotations
import typing
from ..chart.x_chart_data_array import XChartDataArray as XChartDataArray_df4c0cdd
from ..container.x_named import XNamed as XNamed_a6520b08
from ..sheet.x_cell_range_data import XCellRangeData as XCellRangeData_d2e70c60
from ..table.x_auto_formattable import XAutoFormattable as XAutoFormattable_ee660d72
from ..table.x_cell_range import XCellRange as XCellRange_a2f70ad5
from .text_content import TextContent as TextContent_a6810b4d
from .x_text_table import XTextTable as XTextTable_9a810ab2
from ..util.x_sortable import XSortable as XSortable_8ff20a5a
from ..xml.user_defined_attributes_supplier import UserDefinedAttributesSupplier as UserDefinedAttributesSupplier_9fbe1222
if typing.TYPE_CHECKING:
    from ..beans.property_value import PropertyValue as PropertyValue_c9610c73
    from ..graphic.x_graphic import XGraphic as XGraphic_a4da0afc
    from ..table.shadow_format import ShadowFormat as ShadowFormat_bb840bdf
    from ..table.table_border import TableBorder as TableBorder_aedf0b56
    from .table_column_separator import TableColumnSeparator as TableColumnSeparator_1b630ed4
    from ..util.color import Color as Color_68e908c5
    from com.sun.star.style.GraphicLocation import GraphicLocationProto
    from com.sun.star.style.BreakType import BreakTypeProto

class TextTable(TextContent_a6810b4d, UserDefinedAttributesSupplier_9fbe1222, XChartDataArray_df4c0cdd, XNamed_a6520b08, XCellRangeData_d2e70c60, XAutoFormattable_ee660d72, XCellRange_a2f70ad5, XTextTable_9a810ab2, XSortable_8ff20a5a):
    """
    Service Class

    is a table of text cells which is anchored to a surrounding text.
    
    Note: The anchor of the actual implementation for text tables does not have a position in the text. Thus that anchor can not be used for some operation like XTextContent.attach() or XText.insertTextContent() or other function that require the object to have a position in the text.
    
    The reason why a text table still needs an anchor is that for example tables should be insertable via XText.insertTextContent() and that interface uses a parameter of that type.
    
    Example: Create and insert a TextTable:
    
    **since**
    
        LibreOffice 4.3

    See Also:
        `API TextTable <https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1text_1_1TextTable.html>`_
    """
    @property
    def TableColumnSeparators(self) -> typing.Tuple[TableColumnSeparator_1b630ed4, ...]:
        """
        contains the column description of the table.
        """
        ...
    @TableColumnSeparators.setter
    def TableColumnSeparators(self, value: typing.Tuple[TableColumnSeparator_1b630ed4, ...]) -> None:
        ...
    @property
    def TableInteropGrabBag(self) -> typing.Tuple[PropertyValue_c9610c73, ...]:
        """
        Grab bag of table properties, used as a string-any map for interim interop purposes.
        
        This property is intentionally not handled by the ODF filter. Any member that should be handled there should be first moved out from this grab bag to a separate property.
        
        **since**
        
            LibreOffice 4.3
        """
        ...
    @TableInteropGrabBag.setter
    def TableInteropGrabBag(self, value: typing.Tuple[PropertyValue_c9610c73, ...]) -> None:
        ...
    @property
    def BackColor(self) -> Color_68e908c5:
        """
        contains the color of the background.
        """
        ...
    @BackColor.setter
    def BackColor(self, value: Color_68e908c5) -> None:
        ...
    @property
    def BackGraphic(self) -> XGraphic_a4da0afc:
        """
        contains the graphic for the background.
        
        **since**
        
            LibreOffice 6.1
        """
        ...
    @BackGraphic.setter
    def BackGraphic(self, value: XGraphic_a4da0afc) -> None:
        ...
    @property
    def BackGraphicFilter(self) -> str:
        """
        contains the name of the file filter for the background graphic.
        """
        ...
    @BackGraphicFilter.setter
    def BackGraphicFilter(self, value: str) -> None:
        ...
    @property
    def BackGraphicLocation(self) -> GraphicLocationProto:
        """
        determines the position of the background graphic.
        """
        ...
    @BackGraphicLocation.setter
    def BackGraphicLocation(self, value: GraphicLocationProto) -> None:
        ...
    @property
    def BackGraphicURL(self) -> str:
        """
        contains the URL for the background graphic.
        
        Note the new behaviour since it this was deprecated: This property can only be set and only external URLs are supported (no more vnd.sun.star.GraphicObject scheme). When an URL is set, then it will load the graphic and set the BackGraphic property.
        """
        ...
    @BackGraphicURL.setter
    def BackGraphicURL(self, value: str) -> None:
        ...
    @property
    def BackTransparent(self) -> bool:
        """
        determines if the background color is transparent.
        """
        ...
    @BackTransparent.setter
    def BackTransparent(self, value: bool) -> None:
        ...
    @property
    def BottomMargin(self) -> int:
        """
        determines the bottom margin.
        """
        ...
    @BottomMargin.setter
    def BottomMargin(self, value: int) -> None:
        ...
    @property
    def BreakType(self) -> BreakTypeProto:
        """
        determines the type of break that is applied at the beginning of the table.
        """
        ...
    @BreakType.setter
    def BreakType(self, value: BreakTypeProto) -> None:
        ...
    @property
    def ChartColumnAsLabel(self) -> bool:
        """
        determines if the first column of the table should be treated as axis labels when a chart is to be created.
        """
        ...
    @ChartColumnAsLabel.setter
    def ChartColumnAsLabel(self, value: bool) -> None:
        ...
    @property
    def ChartRowAsLabel(self) -> bool:
        """
        determines if the first row of the table should be treated as axis labels when a chart is to be created.
        """
        ...
    @ChartRowAsLabel.setter
    def ChartRowAsLabel(self, value: bool) -> None:
        ...
    @property
    def CollapsingBorders(self) -> bool:
        """
        determines whether borders of neighboring table cells are collapsed into one
        """
        ...
    @CollapsingBorders.setter
    def CollapsingBorders(self, value: bool) -> None:
        ...
    @property
    def HeaderRowCount(self) -> int:
        """
        determines the number of rows of the table repeated on every new page.
        """
        ...
    @HeaderRowCount.setter
    def HeaderRowCount(self, value: int) -> None:
        ...
    @property
    def HoriOrient(self) -> int:
        """
        contains the horizontal orientation.
        """
        ...
    @HoriOrient.setter
    def HoriOrient(self, value: int) -> None:
        ...
    @property
    def IsWidthRelative(self) -> bool:
        """
        determines if the value of the relative width is valid.
        """
        ...
    @IsWidthRelative.setter
    def IsWidthRelative(self, value: bool) -> None:
        ...
    @property
    def KeepTogether(self) -> bool:
        """
        Setting this property to TRUE prevents page or column breaks between this table and the following paragraph or text table.
        """
        ...
    @KeepTogether.setter
    def KeepTogether(self, value: bool) -> None:
        ...
    @property
    def LeftMargin(self) -> int:
        """
        contains the left margin of the table.
        """
        ...
    @LeftMargin.setter
    def LeftMargin(self, value: int) -> None:
        ...
    @property
    def PageDescName(self) -> str:
        """
        If this property is set, it creates a page break before the table and assigns the value as the name of the new page style sheet to use.
        """
        ...
    @PageDescName.setter
    def PageDescName(self, value: str) -> None:
        ...
    @property
    def PageNumberOffset(self) -> int:
        """
        If a page break property is set at the table, this property contains the new value for the page number.
        """
        ...
    @PageNumberOffset.setter
    def PageNumberOffset(self, value: int) -> None:
        ...
    @property
    def RelativeWidth(self) -> int:
        """
        determines the width of the table relative to its environment.
        """
        ...
    @RelativeWidth.setter
    def RelativeWidth(self, value: int) -> None:
        ...
    @property
    def RepeatHeadline(self) -> bool:
        """
        determines if the first row of the table is repeated on every new page.
        """
        ...
    @RepeatHeadline.setter
    def RepeatHeadline(self, value: bool) -> None:
        ...
    @property
    def RightMargin(self) -> int:
        """
        contains the right margin of the table.
        """
        ...
    @RightMargin.setter
    def RightMargin(self, value: int) -> None:
        ...
    @property
    def ShadowFormat(self) -> ShadowFormat_bb840bdf:
        """
        determines the type, color and size of the shadow.
        """
        ...
    @ShadowFormat.setter
    def ShadowFormat(self, value: ShadowFormat_bb840bdf) -> None:
        ...
    @property
    def Split(self) -> bool:
        """
        Setting this property to FALSE prevents the table from getting spread on two pages.
        """
        ...
    @Split.setter
    def Split(self, value: bool) -> None:
        ...
    @property
    def TableBorder(self) -> TableBorder_aedf0b56:
        """
        contains the description of the table borders.
        """
        ...
    @TableBorder.setter
    def TableBorder(self, value: TableBorder_aedf0b56) -> None:
        ...
    @property
    def TableColumnRelativeSum(self) -> int:
        """
        contains the sum of the column width values used in TableColumnSeparators.
        """
        ...
    @TableColumnRelativeSum.setter
    def TableColumnRelativeSum(self, value: int) -> None:
        ...
    @property
    def TableTemplateName(self) -> str:
        """
        contains the name of table style used by the table.
        
        **since**
        
            LibreOffice 5.3
        """
        ...
    @TableTemplateName.setter
    def TableTemplateName(self, value: str) -> None:
        ...
    @property
    def TopMargin(self) -> int:
        """
        determines the top margin.
        """
        ...
    @TopMargin.setter
    def TopMargin(self, value: int) -> None:
        ...
    @property
    def Width(self) -> int:
        """
        contains the absolute table width.
        
        As this is only a describing property the value of the actual table may vary depending on the environment the table is located in and the settings of LeftMargin, RightMargin and HoriOrient.
        """
        ...
    @Width.setter
    def Width(self, value: int) -> None:
        ...

