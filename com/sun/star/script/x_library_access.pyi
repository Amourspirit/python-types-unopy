# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Interface Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.4
# Namespace: com.sun.star.script
from __future__ import annotations
import typing

import uno
from ..uno.x_interface import XInterface as XInterface_8f010a43


class XLibraryAccess(XInterface_8f010a43):
    """
    provides access to additional scripting code.
    
    This code is organized in modules and these modules contain the functions. It is possible to get just the code from a function, but you can also get the whole code of a module with all functions in it.
    
    .. deprecated::
    
        Class is deprecated.

    See Also:
        `API XLibraryAccess <https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1script_1_1XLibraryAccess.html>`_
    """
    __pyunointerface__: str = 'com.sun.star.script.XLibraryAccess'

    def getFunctionCode(self, FunctionName: str) -> uno.ByteSequence:
        """
        Get the compiled code of a function.
        """
        ...
    def getFunctionSource(self, aFunctionName: str) -> str:
        """
        get the source code of a function.
        """
        ...
    def getModuleCode(self, aModuleName: str) -> uno.ByteSequence:
        """
        Get the whole compiled code of a module.
        """
        ...
    def getModuleNames(self) -> typing.Tuple[str, ...]:
        """
        Return all module names which contain code.
        
        e.g., { \"UtilLibrary.ModuleDate\", \"UtilLibrary.Output\", ... }
        """
        ...
    def getModuleSource(self, aModulName: str) -> str:
        """
        get the source code of a module.
        """
        ...
    def isFunction(self, aFunctionName: str) -> bool:
        """
        returns TRUE, if the function is accessible through this library; otherwise it returns FALSE.
        """
        ...
    def isValidPath(self, aPathName: str) -> bool:
        """
        returns TRUE if a fully qualified function name begins with this name.
        """
        ...



