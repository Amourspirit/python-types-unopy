# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Service Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.4
# Namespace: com.sun.star.text
import typing
from abc import ABC
if typing.TYPE_CHECKING:
    from .x_text import XText as XText_690408ca
    from .x_text_columns import XTextColumns as XTextColumns_b17f0bab
    from ..util.color import Color as Color_68e908c5

class TextPageStyle(ABC):
    """
    Service Class

    represents a page style for a text document.
    
    This service extends the service com.sun.star.style.PageStyle with specific properties for text documents.
    
    **since**
    
        LibreOffice 4.0

    See Also:
        `API TextPageStyle <https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1text_1_1TextPageStyle.html>`_
    """
    @property
    def FooterText(self) -> 'XText_690408ca':
        """
        contains the interface to the text of the footer.
        """
        ...
    @FooterText.setter
    def FooterText(self, value: 'XText_690408ca') -> None:
        ...
    @property
    def FooterTextFirst(self) -> 'XText_690408ca':
        """
        contains the interface to the text of the footer of a first page.
        
        **since**
        
            LibreOffice 4.0
        """
        ...
    @FooterTextFirst.setter
    def FooterTextFirst(self, value: 'XText_690408ca') -> None:
        ...
    @property
    def FooterTextLeft(self) -> 'XText_690408ca':
        """
        contains the interface to the text of the footer of a left page.
        """
        ...
    @FooterTextLeft.setter
    def FooterTextLeft(self, value: 'XText_690408ca') -> None:
        ...
    @property
    def FooterTextRight(self) -> 'XText_690408ca':
        """
        contains the interface to the text of the footer of a right page.
        """
        ...
    @FooterTextRight.setter
    def FooterTextRight(self, value: 'XText_690408ca') -> None:
        ...
    @property
    def FootnoteHeight(self) -> int:
        """
        contains the maximum height of the footnote area (in 1/100 mm).
        
        If set to zero, the height of the current page is used as limit.
        """
        ...
    @FootnoteHeight.setter
    def FootnoteHeight(self, value: int) -> None:
        ...
    @property
    def FootnoteLineAdjust(self) -> int:
        """
        contains the adjustment of the separator line between the text and the footnote area.
        """
        ...
    @FootnoteLineAdjust.setter
    def FootnoteLineAdjust(self, value: int) -> None:
        ...
    @property
    def FootnoteLineColor(self) -> 'Color_68e908c5':
        """
        contains the color of the separator line between the text and the footnote area.
        """
        ...
    @FootnoteLineColor.setter
    def FootnoteLineColor(self, value: 'Color_68e908c5') -> None:
        ...
    @property
    def FootnoteLineDistance(self) -> int:
        """
        contains the distance between the footnote area and the separator line between the text and the footnote area (in 1/100 mm).
        """
        ...
    @FootnoteLineDistance.setter
    def FootnoteLineDistance(self, value: int) -> None:
        ...
    @property
    def FootnoteLineRelativeWidth(self) -> int:
        """
        contains the relative width of the separator line between the text and the footnote area (in percent).
        """
        ...
    @FootnoteLineRelativeWidth.setter
    def FootnoteLineRelativeWidth(self, value: int) -> None:
        ...
    @property
    def FootnoteLineTextDistance(self) -> int:
        """
        contains the distance between the text and the separator line between the text and the footnote area (in 1/100 mm).
        """
        ...
    @FootnoteLineTextDistance.setter
    def FootnoteLineTextDistance(self, value: int) -> None:
        ...
    @property
    def FootnoteLineWeight(self) -> int:
        """
        contains the weight of the separator line between the text and the footnote area (in 1/100 mm).
        """
        ...
    @FootnoteLineWeight.setter
    def FootnoteLineWeight(self, value: int) -> None:
        ...
    @property
    def HeaderText(self) -> 'XText_690408ca':
        """
        contains the interface to the text of the header.
        """
        ...
    @HeaderText.setter
    def HeaderText(self, value: 'XText_690408ca') -> None:
        ...
    @property
    def HeaderTextFirst(self) -> 'XText_690408ca':
        """
        contains the interface to the text of the header of first pages.
        
        **since**
        
            LibreOffice 4.0
        """
        ...
    @HeaderTextFirst.setter
    def HeaderTextFirst(self, value: 'XText_690408ca') -> None:
        ...
    @property
    def HeaderTextLeft(self) -> 'XText_690408ca':
        """
        contains the interface to the text of the header of left pages.
        """
        ...
    @HeaderTextLeft.setter
    def HeaderTextLeft(self, value: 'XText_690408ca') -> None:
        ...
    @property
    def HeaderTextRight(self) -> 'XText_690408ca':
        """
        contains the interface to the text of the header of right pages.
        """
        ...
    @HeaderTextRight.setter
    def HeaderTextRight(self, value: 'XText_690408ca') -> None:
        ...
    @property
    def RegisterModeActive(self) -> bool:
        """
        determines whether the register mode is active on that page.
        """
        ...
    @RegisterModeActive.setter
    def RegisterModeActive(self, value: bool) -> None:
        ...
    @property
    def RegisterParagraphStyle(self) -> str:
        """
        contains the name of the paragraph style that is used as reference of the register mode.
        """
        ...
    @RegisterParagraphStyle.setter
    def RegisterParagraphStyle(self, value: str) -> None:
        ...
    @property
    def TextColumns(self) -> 'XTextColumns_b17f0bab':
        """
        contains the column settings of the page.
        """
        ...
    @TextColumns.setter
    def TextColumns(self, value: 'XTextColumns_b17f0bab') -> None:
        ...

