# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: com.sun.star.frame.status
# Libre Office Version: 7.4
import typing


class UpperLowerMarginScale(object):
    """
    Struct Class

    specifies an upper and lower margin.
    
    **since**
    
        OOo 2.0

    See Also:
        `API UpperLowerMarginScale <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1frame_1_1status_1_1UpperLowerMarginScale.html>`_
    """
    typeName: str = 'com.sun.star.frame.status.UpperLowerMarginScale'

    def __init__(self, Upper: typing.Optional[int] = ..., Lower: typing.Optional[int] = ..., ScaleUpper: typing.Optional[int] = ..., ScaleLower: typing.Optional[int] = ...) -> None:
        """
        Constructor

        Arguments:
            Upper (int, optional): Upper value.
            Lower (int, optional): Lower value.
            ScaleUpper (int, optional): ScaleUpper value.
            ScaleLower (int, optional): ScaleLower value.
        """
        ...

    @property
    def Upper(self) -> int:
        """
        specifies a upper margin in 1/100th mm.
        """
        ...
    @Upper.setter
    def Upper(self, value: int) -> None:
        ...
    @property
    def Lower(self) -> int:
        """
        specifies a lower margin in 1/100th mm.
        """
        ...
    @Lower.setter
    def Lower(self, value: int) -> None:
        ...
    @property
    def ScaleUpper(self) -> int:
        """
        specifies a scale value for the upper margin.
        """
        ...
    @ScaleUpper.setter
    def ScaleUpper(self, value: int) -> None:
        ...
    @property
    def ScaleLower(self) -> int:
        """
        specifies a scale value for the lower margin.
        """
        ...
    @ScaleLower.setter
    def ScaleLower(self, value: int) -> None:
        ...

