# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Service Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.4
# Namespace: com.sun.star.sheet
from __future__ import annotations
import typing
from ..beans.x_property_set import XPropertySet as XPropertySet_bc180bfa
if typing.TYPE_CHECKING:
    from ..table.shadow_format import ShadowFormat as ShadowFormat_bb840bdf
    from ..table.table_border import TableBorder as TableBorder_aedf0b56
    from ..table.table_border2 import TableBorder2 as TableBorder2_ba670b88
    from ..util.color import Color as Color_68e908c5
    from com.sun.star.awt.FontSlant import FontSlantProto  # type: ignore
    from com.sun.star.table.CellHoriJustify import CellHoriJustifyProto  # type: ignore
    from com.sun.star.table.CellOrientation import CellOrientationProto  # type: ignore

class TableAutoFormatField(XPropertySet_bc180bfa):
    """
    Service Class

    represents a field in an AutoFormat.
    
    A field contains all cell properties for a specific position in an AutoFormat.
    
    **since**
    
        OOo 1.1.2

    See Also:
        `API TableAutoFormatField <https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1sheet_1_1TableAutoFormatField.html>`_
    """
    @property
    def CellBackColor(self) -> Color_68e908c5:
        """
        contains the cell background color.
        """
        ...
    @CellBackColor.setter
    def CellBackColor(self, value: Color_68e908c5) -> None:
        ...
    @property
    def CharColor(self) -> Color_68e908c5:
        """
        contains the value of the text color.
        """
        ...
    @CharColor.setter
    def CharColor(self, value: Color_68e908c5) -> None:
        ...
    @property
    def CharContoured(self) -> bool:
        """
        is TRUE if the characters are contoured.
        """
        ...
    @CharContoured.setter
    def CharContoured(self, value: bool) -> None:
        ...
    @property
    def CharCrossedOut(self) -> bool:
        """
        is TRUE if the characters are crossed out.
        """
        ...
    @CharCrossedOut.setter
    def CharCrossedOut(self, value: bool) -> None:
        ...
    @property
    def CharFontCharSet(self) -> str:
        """
        contains the value of the character set of the western font.
        """
        ...
    @CharFontCharSet.setter
    def CharFontCharSet(self, value: str) -> None:
        ...
    @property
    def CharFontCharSetAsian(self) -> str:
        """
        contains the value of the character set of the Asian font.
        """
        ...
    @CharFontCharSetAsian.setter
    def CharFontCharSetAsian(self, value: str) -> None:
        ...
    @property
    def CharFontCharSetComplex(self) -> str:
        """
        contains the value of the character set of the complex font.
        """
        ...
    @CharFontCharSetComplex.setter
    def CharFontCharSetComplex(self, value: str) -> None:
        ...
    @property
    def CharFontFamily(self) -> str:
        """
        contains the value of the western font family.
        """
        ...
    @CharFontFamily.setter
    def CharFontFamily(self, value: str) -> None:
        ...
    @property
    def CharFontFamilyAsian(self) -> str:
        """
        contains the value of the Asian font family.
        """
        ...
    @CharFontFamilyAsian.setter
    def CharFontFamilyAsian(self, value: str) -> None:
        ...
    @property
    def CharFontFamilyComplex(self) -> str:
        """
        contains the value of the complex font family.
        """
        ...
    @CharFontFamilyComplex.setter
    def CharFontFamilyComplex(self, value: str) -> None:
        ...
    @property
    def CharFontName(self) -> str:
        """
        specifies the name of the western font.
        """
        ...
    @CharFontName.setter
    def CharFontName(self, value: str) -> None:
        ...
    @property
    def CharFontNameAsian(self) -> str:
        """
        specifies the name of the Asian font.
        """
        ...
    @CharFontNameAsian.setter
    def CharFontNameAsian(self, value: str) -> None:
        ...
    @property
    def CharFontNameComplex(self) -> str:
        """
        specifies the name of the complex font.
        """
        ...
    @CharFontNameComplex.setter
    def CharFontNameComplex(self, value: str) -> None:
        ...
    @property
    def CharFontPitch(self) -> str:
        """
        contains the value of the pitch of the western font.
        """
        ...
    @CharFontPitch.setter
    def CharFontPitch(self, value: str) -> None:
        ...
    @property
    def CharFontPitchAsian(self) -> str:
        """
        contains the value of the pitch of the Asian font.
        """
        ...
    @CharFontPitchAsian.setter
    def CharFontPitchAsian(self, value: str) -> None:
        ...
    @property
    def CharFontPitchComplex(self) -> str:
        """
        contains the value of the pitch of the complex font.
        """
        ...
    @CharFontPitchComplex.setter
    def CharFontPitchComplex(self, value: str) -> None:
        ...
    @property
    def CharFontStyleName(self) -> str:
        """
        specifies the name of the western font style.
        """
        ...
    @CharFontStyleName.setter
    def CharFontStyleName(self, value: str) -> None:
        ...
    @property
    def CharFontStyleNameAsian(self) -> str:
        """
        specifies the name of the Asian font style.
        """
        ...
    @CharFontStyleNameAsian.setter
    def CharFontStyleNameAsian(self, value: str) -> None:
        ...
    @property
    def CharFontStyleNameComplex(self) -> str:
        """
        specifies the name of the complex font style.
        """
        ...
    @CharFontStyleNameComplex.setter
    def CharFontStyleNameComplex(self, value: str) -> None:
        ...
    @property
    def CharHeight(self) -> float:
        """
        contains the height of characters of the western font in point.
        """
        ...
    @CharHeight.setter
    def CharHeight(self, value: float) -> None:
        ...
    @property
    def CharHeightAsian(self) -> float:
        """
        contains the height of characters of the Asian font in point.
        """
        ...
    @CharHeightAsian.setter
    def CharHeightAsian(self, value: float) -> None:
        ...
    @property
    def CharHeightComplex(self) -> float:
        """
        contains the height of characters of the complex font in point.
        """
        ...
    @CharHeightComplex.setter
    def CharHeightComplex(self, value: float) -> None:
        ...
    @property
    def CharPosture(self) -> FontSlantProto:
        """
        contains the value of the posture of characters of the western font.
        """
        ...
    @CharPosture.setter
    def CharPosture(self, value: FontSlantProto) -> None:
        ...
    @property
    def CharPostureAsian(self) -> FontSlantProto:
        """
        contains the value of the posture of characters of the Asian font.
        """
        ...
    @CharPostureAsian.setter
    def CharPostureAsian(self, value: FontSlantProto) -> None:
        ...
    @property
    def CharPostureComplex(self) -> FontSlantProto:
        """
        contains the value of the posture of characters of the complex font.
        """
        ...
    @CharPostureComplex.setter
    def CharPostureComplex(self, value: FontSlantProto) -> None:
        ...
    @property
    def CharShadowed(self) -> bool:
        """
        is TRUE if the characters are shadowed.
        """
        ...
    @CharShadowed.setter
    def CharShadowed(self, value: bool) -> None:
        ...
    @property
    def CharUnderline(self) -> int:
        """
        contains the value for the character underline.
        """
        ...
    @CharUnderline.setter
    def CharUnderline(self, value: int) -> None:
        ...
    @property
    def CharWeight(self) -> float:
        """
        contains the value for the weight of characters of the western font.
        """
        ...
    @CharWeight.setter
    def CharWeight(self, value: float) -> None:
        ...
    @property
    def CharWeightAsian(self) -> float:
        """
        contains the value for the weight of characters of the Asian font.
        """
        ...
    @CharWeightAsian.setter
    def CharWeightAsian(self, value: float) -> None:
        ...
    @property
    def CharWeightComplex(self) -> float:
        """
        contains the value for the weight of characters of the complex font.
        """
        ...
    @CharWeightComplex.setter
    def CharWeightComplex(self, value: float) -> None:
        ...
    @property
    def HoriJustify(self) -> CellHoriJustifyProto:
        """
        specifies the horizontal alignment of the cell contents.
        """
        ...
    @HoriJustify.setter
    def HoriJustify(self, value: CellHoriJustifyProto) -> None:
        ...
    @property
    def IsCellBackgroundTransparent(self) -> bool:
        """
        is TRUE if the cell background is transparent.
        
        In this case the TableAutoFormatField.CellBackColor value is not used.
        """
        ...
    @IsCellBackgroundTransparent.setter
    def IsCellBackgroundTransparent(self, value: bool) -> None:
        ...
    @property
    def IsTextWrapped(self) -> bool:
        """
        is TRUE if text breaks automatically at cell borders.
        """
        ...
    @IsTextWrapped.setter
    def IsTextWrapped(self, value: bool) -> None:
        ...
    @property
    def Orientation(self) -> CellOrientationProto:
        """
        contains the orientation of the cell contents (i.e.
        
        top-to-bottom or stacked).
        """
        ...
    @Orientation.setter
    def Orientation(self, value: CellOrientationProto) -> None:
        ...
    @property
    def ParaBottomMargin(self) -> int:
        """
        contains the margin between cell contents and bottom border (in 1/100 mm).
        """
        ...
    @ParaBottomMargin.setter
    def ParaBottomMargin(self, value: int) -> None:
        ...
    @property
    def ParaLeftMargin(self) -> int:
        """
        contains the margin between cell contents and left border (in 1/100 mm).
        """
        ...
    @ParaLeftMargin.setter
    def ParaLeftMargin(self, value: int) -> None:
        ...
    @property
    def ParaRightMargin(self) -> int:
        """
        contains the margin between cell contents and right border (in 1/100 mm).
        """
        ...
    @ParaRightMargin.setter
    def ParaRightMargin(self, value: int) -> None:
        ...
    @property
    def ParaTopMargin(self) -> int:
        """
        contains the margin between cell contents and top border (in 1/100 mm).
        """
        ...
    @ParaTopMargin.setter
    def ParaTopMargin(self, value: int) -> None:
        ...
    @property
    def RotateAngle(self) -> int:
        """
        contains the rotation angle of the cell contents.
        """
        ...
    @RotateAngle.setter
    def RotateAngle(self, value: int) -> None:
        ...
    @property
    def RotateReference(self) -> int:
        """
        contains the reference edge of the cell rotation.
        
        changed from com.sun.star.table.CellVertJustify to long in LibO 3.5
        """
        ...
    @RotateReference.setter
    def RotateReference(self, value: int) -> None:
        ...
    @property
    def ShadowFormat(self) -> ShadowFormat_bb840bdf:
        """
        contains a description of the shadow.
        """
        ...
    @ShadowFormat.setter
    def ShadowFormat(self, value: ShadowFormat_bb840bdf) -> None:
        ...
    @property
    def TableBorder(self) -> TableBorder_aedf0b56:
        """
        property containing a description of the cell border.
        
        **since**
        
            OOo 1.1.2
        """
        ...
    @TableBorder.setter
    def TableBorder(self, value: TableBorder_aedf0b56) -> None:
        ...
    @property
    def TableBorder2(self) -> TableBorder2_ba670b88:
        """
        property containing a description of the cell border.
        
        Preferred over com.sun.star.table.TableBorder TableBorder.
        
        **since**
        
            LibreOffice 3.6
        """
        ...
    @TableBorder2.setter
    def TableBorder2(self, value: TableBorder2_ba670b88) -> None:
        ...
    @property
    def VertJustify(self) -> int:
        """
        specifies the vertical alignment of the cell contents.
        
        changed from com.sun.star.table.CellVertJustify to long in LibO 3.5
        """
        ...
    @VertJustify.setter
    def VertJustify(self, value: int) -> None:
        ...