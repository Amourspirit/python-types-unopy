# coding: utf-8
#
# Copyright 2023 :Barry-Thomas-Paul: Moss
#
# Licensed under the Apache License, Version 2.0 (the "License")
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: // www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Service Class
# this is a auto generated file generated by Cheetah
# Libre Office Version: 7.4
# Namespace: com.sun.star.sheet
from __future__ import annotations
import typing
from ..beans.x_property_set import XPropertySet as XPropertySet_bc180bfa
if typing.TYPE_CHECKING:
    from ..awt.x_device import XDevice as XDevice_70ba08fc
    from ..i18n.x_forbidden_characters import XForbiddenCharacters as XForbiddenCharacters_df60e2d
    from ..lang.locale import Locale as Locale_70d308fa
    from ..util.date import Date as Date_60040844

class SpreadsheetDocumentSettings(XPropertySet_bc180bfa):
    """
    Service Class

    contributes properties to control the configuration which is global for all views of a spreadsheet document.
    
    **since**
    
        OOo 3.0
    
    .. deprecated::
    
        Class is deprecated.

    See Also:
        `API SpreadsheetDocumentSettings <https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1sheet_1_1SpreadsheetDocumentSettings.html>`_
    """
    @property
    def CalcAsShown(self) -> bool:
        """
        specifies whether calculations are performed with the rounded values displayed in cells (set to TRUE) instead of the internal values (set to FALSE).
        """
        ...
    @CalcAsShown.setter
    def CalcAsShown(self, value: bool) -> None:
        ...
    @property
    def CharLocale(self) -> Locale_70d308fa:
        """
        contains the standard document language for Western text.
        """
        ...
    @CharLocale.setter
    def CharLocale(self, value: Locale_70d308fa) -> None:
        ...
    @property
    def CharLocaleAsian(self) -> Locale_70d308fa:
        """
        contains the standard document language for Asian text.
        """
        ...
    @CharLocaleAsian.setter
    def CharLocaleAsian(self, value: Locale_70d308fa) -> None:
        ...
    @property
    def CharLocaleComplex(self) -> Locale_70d308fa:
        """
        contains the standard document language for Complex text.
        """
        ...
    @CharLocaleComplex.setter
    def CharLocaleComplex(self, value: Locale_70d308fa) -> None:
        ...
    @property
    def DefaultTabStop(self) -> int:
        """
        specifies the width of default tabulators.
        """
        ...
    @DefaultTabStop.setter
    def DefaultTabStop(self, value: int) -> None:
        ...
    @property
    def ForbiddenCharacters(self) -> XForbiddenCharacters_df60e2d:
        """
        contains the interface XForbiddenCharacters.
        """
        ...
    @ForbiddenCharacters.setter
    def ForbiddenCharacters(self, value: XForbiddenCharacters_df60e2d) -> None:
        ...
    @property
    def HasDrawPages(self) -> bool:
        """
        If this property is set the document has DrawPages.
        
        Use this property to find out, whether the document has DrawPages or not, because the getDrawPage method on the XDrawPageSupplier and the getDrawPages method on the XDrawPagesSupplier always creates the DrawPages if there are none; and this is very slow and needs more memory.
        """
        ...
    @HasDrawPages.setter
    def HasDrawPages(self, value: bool) -> None:
        ...
    @property
    def IgnoreCase(self) -> bool:
        """
        specifies whether upper and lower cases are treated as equal when comparing cells.
        """
        ...
    @IgnoreCase.setter
    def IgnoreCase(self, value: bool) -> None:
        ...
    @property
    def IsAdjustHeightEnabled(self) -> bool:
        """
        specifies whether the automatic adjustment of the row height is enabled.
        
        This boolean is actually a counter internally, of the number of times something has locked the height, so setting it to false will only perform one unlock operation, and might leave it still locked
        
        **since**
        
            OOo 3.0
        """
        ...
    @IsAdjustHeightEnabled.setter
    def IsAdjustHeightEnabled(self, value: bool) -> None:
        ...
    @property
    def IsExecuteLinkEnabled(self) -> bool:
        """
        specifies whether the automatic execution of links is enabled.
        
        **since**
        
            OOo 3.0
        """
        ...
    @IsExecuteLinkEnabled.setter
    def IsExecuteLinkEnabled(self, value: bool) -> None:
        ...
    @property
    def IsIterationEnabled(self) -> bool:
        """
        enables iterated calculation of circular references.
        """
        ...
    @IsIterationEnabled.setter
    def IsIterationEnabled(self, value: bool) -> None:
        ...
    @property
    def IsLoaded(self) -> bool:
        """
        specifies whether the document data are already loaded.
        
        **since**
        
            OOo 3.0
        """
        ...
    @IsLoaded.setter
    def IsLoaded(self, value: bool) -> None:
        ...
    @property
    def IsRecordChangesProtected(self) -> bool:
        """
        specifies whether changes record is protected.
        
        **since**
        
            LibreOffice 5.0
        """
        ...
    @IsRecordChangesProtected.setter
    def IsRecordChangesProtected(self, value: bool) -> None:
        ...
    @property
    def IsUndoEnabled(self) -> bool:
        """
        specifies whether the undo command is enabled.
        
        **since**
        
            OOo 3.0
        """
        ...
    @IsUndoEnabled.setter
    def IsUndoEnabled(self, value: bool) -> None:
        ...
    @property
    def IterationCount(self) -> int:
        """
        specifies how many iterations are carried out.
        
        This setting is only used, if iteration is enabled using SpreadsheetDocumentSettings.IsIterationEnabled.
        """
        ...
    @IterationCount.setter
    def IterationCount(self, value: int) -> None:
        ...
    @property
    def IterationEpsilon(self) -> float:
        """
        specifies the point at which a change in results will stop the iteration.
        
        More exactly it specifies a difference in the change of the result between two iterations. If the result difference is less than or equal to this epsilon-value, the iteration is stopped.
        
        This setting is only used, if iteration is enabled using SpreadsheetDocumentSettings.IsIterationEnabled.
        """
        ...
    @IterationEpsilon.setter
    def IterationEpsilon(self, value: float) -> None:
        ...
    @property
    def LookUpLabels(self) -> bool:
        """
        specifies whether column or row labels are looked up from anywhere on the sheet.
        
        Explicitly defined label ranges are used even if this property is set to FALSE.
        """
        ...
    @LookUpLabels.setter
    def LookUpLabels(self, value: bool) -> None:
        ...
    @property
    def MatchWholeCell(self) -> bool:
        """
        specifies whether filter criteria must match entire cell contents.
        """
        ...
    @MatchWholeCell.setter
    def MatchWholeCell(self, value: bool) -> None:
        ...
    @property
    def NullDate(self) -> Date_60040844:
        """
        specifies the date that is represented by the value zero.
        """
        ...
    @NullDate.setter
    def NullDate(self, value: Date_60040844) -> None:
        ...
    @property
    def RecordChanges(self) -> bool:
        """
        specifies whether changes record is enabled.
        
        No modification applied if the record changes protection is activated information given by SpreadsheetDocumentSettings.IsRecordChangesProtected
        
        **since**
        
            LibreOffice 5.0
        """
        ...
    @RecordChanges.setter
    def RecordChanges(self, value: bool) -> None:
        ...
    @property
    def ReferenceDevice(self) -> XDevice_70ba08fc:
        """
        contains the reference device used for formatting the document.
        
        **since**
        
            OOo 3.0
        """
        ...
    @ReferenceDevice.setter
    def ReferenceDevice(self, value: XDevice_70ba08fc) -> None:
        ...
    @property
    def RegularExpressions(self) -> bool:
        """
        specifies whether regular expressions in formulas are enabled, e.g., for functions which look up spreadsheet contents.
        
        RegularExpressions and Wildcards are mutually exclusive, only one can have the value TRUE. If both are set to TRUE via API calls then the last one set takes precedence.
        """
        ...
    @RegularExpressions.setter
    def RegularExpressions(self, value: bool) -> None:
        ...
    @property
    def SpellOnline(self) -> bool:
        """
        enables online spell checking.
        """
        ...
    @SpellOnline.setter
    def SpellOnline(self, value: bool) -> None:
        ...
    @property
    def StandardDecimals(self) -> int:
        """
        specifies the number of decimals in the default number format.
        """
        ...
    @StandardDecimals.setter
    def StandardDecimals(self, value: int) -> None:
        ...
    @property
    def Wildcards(self) -> bool:
        """
        specifies whether wildcards in formulas are enabled, e.g., for functions which look up spreadsheet contents.
        
        Wildcards and RegularExpressions are mutually exclusive, only one can have the value TRUE. If both are set to TRUE via API calls then the last one set takes precedence.
        
        **since**
        
            LibreOffice 5.2
        """
        ...
    @Wildcards.setter
    def Wildcards(self, value: bool) -> None:
        ...

